{"ast":null,"code":"var _jsxFileName = \"/workspaces/NoteLetApp/frontend/src/ScanContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScanContext = /*#__PURE__*/createContext();\nexport const ScanProvider = ({\n  children\n}) => {\n  _s();\n  const [currentScan, setCurrentScan] = useState(() => {\n    // Load the initial state from localStorage\n    const savedScan = localStorage.getItem('currentScan');\n    return savedScan ? JSON.parse(savedScan) : null;\n  });\n\n  // Save state to localStorage whenever it changes (usefule for when user accidentilly refreshed or something)\n  useEffect(() => {\n    if (currentScan) {\n      localStorage.setItem('currentScan', JSON.stringify(currentScan));\n    } else {\n      localStorage.removeItem('currentScan');\n    }\n  }, [currentScan]);\n  return /*#__PURE__*/_jsxDEV(ScanContext.Provider, {\n    value: {\n      currentScan,\n      setCurrentScan\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(ScanProvider, \"DDDuIx0TtAz05mFdEseqyFKt970=\");\n_c = ScanProvider;\nexport const useScan = () => {\n  _s2();\n  return useContext(ScanContext);\n};\n_s2(useScan, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ScanProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ScanContext","ScanProvider","children","_s","currentScan","setCurrentScan","savedScan","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useScan","_s2","$RefreshReg$"],"sources":["/workspaces/NoteLetApp/frontend/src/ScanContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ScanContext = createContext();\n\nexport const ScanProvider = ({ children }) => {\n  const [currentScan, setCurrentScan] = useState(() => {\n    // Load the initial state from localStorage\n    const savedScan = localStorage.getItem('currentScan');\n    return savedScan ? JSON.parse(savedScan) : null;\n  });\n\n  // Save state to localStorage whenever it changes (usefule for when user accidentilly refreshed or something)\n  useEffect(() => {\n    if (currentScan) {\n      localStorage.setItem('currentScan', JSON.stringify(currentScan));\n    } else {\n      localStorage.removeItem('currentScan');\n    }\n  }, [currentScan]);\n\n  return (\n    <ScanContext.Provider value={{ currentScan, setCurrentScan }}>\n      {children}\n    </ScanContext.Provider>\n  );\n};\n\nexport const useScan = () => useContext(ScanContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACnD;IACA,MAAMU,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,OAAOF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,GAAG,IAAI;EACjD,CAAC,CAAC;;EAEF;EACAT,SAAS,CAAC,MAAM;IACd,IAAIO,WAAW,EAAE;MACfG,YAAY,CAACI,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACG,SAAS,CAACR,WAAW,CAAC,CAAC;IAClE,CAAC,MAAM;MACLG,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACxC;EACF,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;EAEjB,oBACEL,OAAA,CAACC,WAAW,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEX,WAAW;MAAEC;IAAe,CAAE;IAAAH,QAAA,EAC1DA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAChB,EAAA,CArBWF,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AAuBzB,OAAO,MAAMoB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM3B,UAAU,CAACK,WAAW,CAAC;AAAA;AAACsB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}