{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyli/react-noteletapp/frontend/src/authentication/UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useScan } from '../scans/ScanContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  console.log(\"🔄 UserProvider Rendered\");\n  const {\n    currentScan,\n    setCurrentScan\n  } = useScan();\n  const [userId, setUserId] = useState(() => {\n    let storedUserId = localStorage.getItem(\"userId\") || sessionStorage.getItem(\"guestUserId\");\n    if (!storedUserId) {\n      storedUserId = `guest-${uuidv4()}`;\n      sessionStorage.setItem(\"guestUserId\", storedUserId);\n    }\n    console.log(\"🔹 Initialized userId:\", storedUserId);\n    return storedUserId;\n  });\n  const [email, setEmail] = useState(() => localStorage.getItem(\"email\") || null);\n  const [name, setName] = useState(() => localStorage.getItem(\"name\") || null);\n  const [totalScans, setTotalScans] = useState(0);\n  const [totalFlashcards, setTotalFlashcards] = useState(0);\n  const [totalMockTests, setTotalMockTests] = useState(0);\n\n  /**\n   * 🗑️ Deletes guest user data from the backend.\n   */\n  const deleteGuestData = guestId => {\n    if (!guestId || !guestId.startsWith(\"guest-\")) return;\n    console.log(`🗑️ Attempting to delete guest user data: ${guestId}`);\n    setCurrentScan(null);\n    fetch(`https://api.zukini.com/display/deleteGuestAll?userId=${guestId}`, {\n      method: 'DELETE',\n      keepalive: true,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        console.error(\"❌ Failed to delete guest data.\");\n      }\n    }).catch(error => console.error(\"⚠️ Error deleting guest data:\", error));\n  };\n\n  /**\n   * 🚪 Cleans up guest data on window unload.\n   */\n  useEffect(() => {\n    console.log(\"🛑 Adding beforeunload listener\");\n    const handleUnload = () => {\n      console.log(\"🚪 Before unload: Deleting guest data\");\n      deleteGuestData(sessionStorage.getItem(\"guestUserId\"));\n    };\n    window.addEventListener(\"beforeunload\", handleUnload);\n    return () => {\n      console.log(\"🛑 Removing beforeunload listener\");\n      window.removeEventListener(\"beforeunload\", handleUnload);\n    };\n  }, []);\n\n  /**\n   * 💾 Syncs user data with localStorage and deletes guest data if necessary.\n   */\n  useEffect(() => {\n    console.log(\"📝 useEffect - userId changed:\", userId);\n    if (!userId || userId.startsWith(\"guest-\")) return;\n    const storedUserId = localStorage.getItem(\"userId\");\n    const storedEmail = localStorage.getItem(\"email\");\n    const storedName = localStorage.getItem(\"name\");\n\n    // ✅ Only update if values changed\n    if (storedUserId !== userId || storedEmail !== email || storedName !== name) {\n      console.log(\"💾 Updating localStorage with new user info\");\n      localStorage.setItem(\"userId\", userId);\n      localStorage.setItem(\"email\", email);\n      localStorage.setItem(\"name\", name);\n    }\n\n    // ✅ Delete guest data only if switching from guest to a real user\n    if (sessionStorage.getItem(\"guestUserId\")) {\n      console.log(\"🗑️ Deleting guest data since user logged in\");\n      deleteGuestData(sessionStorage.getItem(\"guestUserId\"));\n      sessionStorage.removeItem(\"guestUserId\");\n    }\n  }, [userId, email, name]);\n\n  /**\n   * 📊 Fetches user statistics when userId changes.\n   */\n  useEffect(() => {\n    console.log(\"📊 useEffect - Fetching user stats\");\n    if (!userId || userId.startsWith(\"guest-\")) return;\n    let isMounted = true;\n    console.log(\"✅ isMounted:\", isMounted);\n    const fetchUserStats = async () => {\n      try {\n        console.log(\"📡 Fetching user stats...\");\n        const [fcRes, mtRes, scanRes] = await Promise.allSettled([fetch(`https://api.zukini.com/display/displayflashcards?userId=${userId}`), fetch(`https://api.zukini.com/display/displaymocktests?userId=${userId}`), fetch(`https://api.zukini.com/display/displayscans?userId=${userId}`)]);\n        const parseResponse = async res => res.status === \"fulfilled\" && res.value.ok ? res.value.json() : [];\n        const [FC, MT, Scans] = await Promise.all([parseResponse(fcRes), parseResponse(mtRes), parseResponse(scanRes)]);\n        if (isMounted) {\n          console.log(\"📊 Updating state with fetched stats\");\n          setTotalFlashcards((FC === null || FC === void 0 ? void 0 : FC.length) || 0);\n          setTotalMockTests((MT === null || MT === void 0 ? void 0 : MT.length) || 0);\n          setTotalScans((Scans === null || Scans === void 0 ? void 0 : Scans.length) || 0);\n        }\n      } catch (error) {\n        console.error(\"⚠️ Error fetching user stats:\", error);\n      }\n    };\n    fetchUserStats();\n    return () => {\n      console.log(\"❌ Cleaning up fetchUserStats\");\n      isMounted = false;\n    };\n  }, [userId]);\n\n  /**\n   * ✅ Memoized value to prevent unnecessary re-renders.\n   */\n  const contextValue = useMemo(() => ({\n    userId,\n    setUserId,\n    email,\n    setEmail,\n    totalScans,\n    setTotalScans,\n    totalFlashcards,\n    setTotalFlashcards,\n    totalMockTests,\n    setTotalMockTests,\n    name,\n    setName\n  }), [userId, email, totalScans, totalFlashcards, totalMockTests, name]);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"6Tl/WNxCWf6qHo8yjPfQZ+HgWmc=\", false, function () {\n  return [useScan];\n});\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useMemo","v4","uuidv4","useScan","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","console","log","currentScan","setCurrentScan","userId","setUserId","storedUserId","localStorage","getItem","sessionStorage","setItem","email","setEmail","name","setName","totalScans","setTotalScans","totalFlashcards","setTotalFlashcards","totalMockTests","setTotalMockTests","deleteGuestData","guestId","startsWith","fetch","method","keepalive","headers","then","response","ok","error","catch","handleUnload","window","addEventListener","removeEventListener","storedEmail","storedName","removeItem","isMounted","fetchUserStats","fcRes","mtRes","scanRes","Promise","allSettled","parseResponse","res","status","value","json","FC","MT","Scans","all","length","contextValue","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["/Users/anthonyli/react-noteletapp/frontend/src/authentication/UserContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useScan } from '../scans/ScanContext';\n\nconst UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n    console.log(\"🔄 UserProvider Rendered\");\n\n    const { currentScan, setCurrentScan } = useScan();\n\n    const [userId, setUserId] = useState(() => {\n        let storedUserId = localStorage.getItem(\"userId\") || sessionStorage.getItem(\"guestUserId\");\n\n        if (!storedUserId) {\n            storedUserId = `guest-${uuidv4()}`;\n            sessionStorage.setItem(\"guestUserId\", storedUserId);\n        }\n        console.log(\"🔹 Initialized userId:\", storedUserId);\n        return storedUserId;\n    });\n\n    const [email, setEmail] = useState(() => localStorage.getItem(\"email\") || null);\n    const [name, setName] = useState(() => localStorage.getItem(\"name\") || null);\n    const [totalScans, setTotalScans] = useState(0);\n    const [totalFlashcards, setTotalFlashcards] = useState(0);\n    const [totalMockTests, setTotalMockTests] = useState(0);\n\n    /**\n     * 🗑️ Deletes guest user data from the backend.\n     */\n    const deleteGuestData = (guestId) => {\n        if (!guestId || !guestId.startsWith(\"guest-\")) return;\n        console.log(`🗑️ Attempting to delete guest user data: ${guestId}`);\n        \n        setCurrentScan(null);\n\n        fetch(`https://api.zukini.com/display/deleteGuestAll?userId=${guestId}`, {\n            method: 'DELETE',\n            keepalive: true,\n            headers: { 'Content-Type': 'application/json' },\n        })\n        .then(response => {\n            if (!response.ok) {\n                console.error(\"❌ Failed to delete guest data.\");\n            }\n        })\n        .catch(error => console.error(\"⚠️ Error deleting guest data:\", error));\n    };\n\n    /**\n     * 🚪 Cleans up guest data on window unload.\n     */\n    useEffect(() => {\n        console.log(\"🛑 Adding beforeunload listener\");\n\n        const handleUnload = () => {\n            console.log(\"🚪 Before unload: Deleting guest data\");\n            deleteGuestData(sessionStorage.getItem(\"guestUserId\"));\n        };\n\n        window.addEventListener(\"beforeunload\", handleUnload);\n\n        return () => {\n            console.log(\"🛑 Removing beforeunload listener\");\n            window.removeEventListener(\"beforeunload\", handleUnload);\n        };\n    }, []);\n\n    /**\n     * 💾 Syncs user data with localStorage and deletes guest data if necessary.\n     */\n    useEffect(() => {\n        console.log(\"📝 useEffect - userId changed:\", userId);\n\n        if (!userId || userId.startsWith(\"guest-\")) return;\n\n        const storedUserId = localStorage.getItem(\"userId\");\n        const storedEmail = localStorage.getItem(\"email\");\n        const storedName = localStorage.getItem(\"name\");\n\n        // ✅ Only update if values changed\n        if (storedUserId !== userId || storedEmail !== email || storedName !== name) {\n            console.log(\"💾 Updating localStorage with new user info\");\n            localStorage.setItem(\"userId\", userId);\n            localStorage.setItem(\"email\", email);\n            localStorage.setItem(\"name\", name);\n        }\n\n        // ✅ Delete guest data only if switching from guest to a real user\n        if (sessionStorage.getItem(\"guestUserId\")) {\n            console.log(\"🗑️ Deleting guest data since user logged in\");\n            deleteGuestData(sessionStorage.getItem(\"guestUserId\"));\n            sessionStorage.removeItem(\"guestUserId\");\n        }\n    }, [userId, email, name]);\n\n    /**\n     * 📊 Fetches user statistics when userId changes.\n     */\n    useEffect(() => {\n        console.log(\"📊 useEffect - Fetching user stats\");\n        if (!userId || userId.startsWith(\"guest-\")) return;\n\n        let isMounted = true;\n        console.log(\"✅ isMounted:\", isMounted);\n\n        const fetchUserStats = async () => {\n            try {\n                console.log(\"📡 Fetching user stats...\");\n                const [fcRes, mtRes, scanRes] = await Promise.allSettled([\n                    fetch(`https://api.zukini.com/display/displayflashcards?userId=${userId}`),\n                    fetch(`https://api.zukini.com/display/displaymocktests?userId=${userId}`),\n                    fetch(`https://api.zukini.com/display/displayscans?userId=${userId}`)\n                ]);\n\n                const parseResponse = async (res) => \n                    res.status === \"fulfilled\" && res.value.ok ? res.value.json() : [];\n\n                const [FC, MT, Scans] = await Promise.all([\n                    parseResponse(fcRes),\n                    parseResponse(mtRes),\n                    parseResponse(scanRes),\n                ]);\n\n                if (isMounted) {\n                    console.log(\"📊 Updating state with fetched stats\");\n                    setTotalFlashcards(FC?.length || 0);\n                    setTotalMockTests(MT?.length || 0);\n                    setTotalScans(Scans?.length || 0);\n                }\n            } catch (error) {\n                console.error(\"⚠️ Error fetching user stats:\", error);\n            }\n        };\n\n        fetchUserStats();\n        \n        return () => {\n            console.log(\"❌ Cleaning up fetchUserStats\");\n            isMounted = false;\n        };\n    }, [userId]);\n\n    /**\n     * ✅ Memoized value to prevent unnecessary re-renders.\n     */\n    const contextValue = useMemo(() => ({\n        userId, setUserId,\n        email, setEmail,\n        totalScans, setTotalScans,\n        totalFlashcards, setTotalFlashcards,\n        totalMockTests, setTotalMockTests,\n        name, setName\n    }), [userId, email, totalScans, totalFlashcards, totalMockTests, name]);\n\n    return (\n        <UserContext.Provider value={contextValue}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n\nexport const useUser = () => {\n    return useContext(UserContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}