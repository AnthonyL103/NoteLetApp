{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyli/react-noteletapp/frontend/src/authentication/UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useScan } from '../scans/ScanContext';\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    currentScan,\n    setCurrentScan\n  } = useScan();\n  const [userId, setUserId] = useState(() => {\n    let storedUserId = localStorage.getItem(\"userId\") || sessionStorage.getItem(\"guestUserId\");\n    if (!storedUserId) {\n      storedUserId = `guest-${uuidv4()}`;\n      sessionStorage.setItem(\"guestUserId\", storedUserId);\n    }\n    return storedUserId;\n  });\n  const [email, setEmail] = useState(() => localStorage.getItem(\"email\") || null);\n  const [name, setName] = useState(() => localStorage.getItem(\"name\") || null);\n  const [totalScans, setTotalScans] = useState(0);\n  const [totalFlashcards, setTotalFlashcards] = useState(0);\n  const [totalMockTests, setTotalMockTests] = useState(0);\n  const deleteGuestData = guestId => {\n    if (!guestId || !guestId.startsWith(\"guest-\")) return;\n    setCurrentScan(null);\n    console.log(`Attempting to delete guest user data: ${guestId}`);\n    fetch(`https://api.zukini.com/display/deleteGuestAll?userId=${guestId}`, {\n      method: 'DELETE',\n      keepalive: true,\n      // Ensures the request completes before unload\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        console.error(\"Failed to delete guest data.\");\n      }\n    }).catch(error => console.error(\"Error deleting guest data:\", error));\n  };\n  useEffect(() => {\n    const handleUnload = () => {\n      deleteGuestData(sessionStorage.getItem(\"guestUserId\"));\n    };\n    window.addEventListener(\"beforeunload\", handleUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleUnload);\n    };\n  }, []);\n\n  // Save userId and email to localStorage\n\n  useEffect(() => {\n    if (userId.startsWith(\"guest-\")) {\n      sessionStorage.setItem(\"guestUserId\", userId);\n    } else {\n      localStorage.setItem(\"userId\", userId);\n      localStorage.setItem(\"email\", email);\n      localStorage.setItem(\"name\", name);\n      if (sessionStorage.getItem(\"guestUserId\")) {\n        deleteGuestData(sessionStorage.getItem(\"guestUserId\"));\n        sessionStorage.removeItem(\"guestUserId\");\n      }\n    }\n  }, [userId, email, name]);\n\n  // Fetch total scans, flashcards, and mock tests when userId changes\n\n  useEffect(() => {\n    if (!userId) return;\n    let isCancelled = false;\n    const fetchUserStats = async () => {\n      try {\n        const [fcRes, mtRes, scanRes] = await Promise.allSettled([fetch(`https://api.zukini.com/display/displayflashcards?userId=${userId}`), fetch(`https://api.zukini.com/display/displaymocktests?userId=${userId}`), fetch(`https://api.zukini.com/display/displayscans?userId=${userId}`)]);\n        if (isCancelled) return;\n        if (fcRes.status === \"rejected\" || mtRes.status === \"rejected\" || scanRes.status === \"rejected\") {\n          console.error(\"One or more API requests failed\");\n          return;\n        }\n        const FC = await fcRes;\n        const MT = await mtRes;\n        const Scans = await scanRes;\n        setTotalFlashcards((FC === null || FC === void 0 ? void 0 : FC.length) || 0);\n        setTotalMockTests((MT === null || MT === void 0 ? void 0 : MT.length) || 0);\n        setTotalScans((Scans === null || Scans === void 0 ? void 0 : Scans.length) || 0);\n      } catch (error) {\n        console.error(\"Error fetching user stats:\", error);\n      }\n    };\n    fetchUserStats();\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userId,\n      setUserId,\n      email,\n      setEmail,\n      totalScans,\n      setTotalScans,\n      totalFlashcards,\n      setTotalFlashcards,\n      totalMockTests,\n      setTotalMockTests,\n      name,\n      setName\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n\n// Hook to use UserContext\n_s(UserProvider, \"5yY/44EShsTF7aU0wk/5CMKWBCo=\", false, function () {\n  return [useScan];\n});\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","v4","uuidv4","useScan","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","currentScan","setCurrentScan","userId","setUserId","storedUserId","localStorage","getItem","sessionStorage","setItem","email","setEmail","name","setName","totalScans","setTotalScans","totalFlashcards","setTotalFlashcards","totalMockTests","setTotalMockTests","deleteGuestData","guestId","startsWith","console","log","fetch","method","keepalive","headers","then","response","ok","error","catch","handleUnload","window","addEventListener","removeEventListener","removeItem","isCancelled","fetchUserStats","fcRes","mtRes","scanRes","Promise","allSettled","status","FC","MT","Scans","length","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["/Users/anthonyli/react-noteletapp/frontend/src/authentication/UserContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useScan } from '../scans/ScanContext';\n\n\n// Create Context\nconst UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n    const { currentScan, setCurrentScan } = useScan(); \n    const [userId, setUserId] = useState(() => {\n        let storedUserId = localStorage.getItem(\"userId\") || sessionStorage.getItem(\"guestUserId\");\n        \n        if (!storedUserId) {\n            storedUserId = `guest-${uuidv4()}`;\n            sessionStorage.setItem(\"guestUserId\", storedUserId);\n        }\n        return storedUserId;\n    });\n\n    const [email, setEmail] = useState(() => localStorage.getItem(\"email\") || null);\n    const [name, setName] = useState(() => localStorage.getItem(\"name\") || null);\n    const [totalScans, setTotalScans] = useState(0);\n    const [totalFlashcards, setTotalFlashcards] = useState(0);\n    const [totalMockTests, setTotalMockTests] = useState(0);\n    \n    const deleteGuestData = (guestId) => {\n        if (!guestId || !guestId.startsWith(\"guest-\")) return;\n        setCurrentScan(null);\n\n        console.log(`Attempting to delete guest user data: ${guestId}`);\n        \n        fetch(`https://api.zukini.com/display/deleteGuestAll?userId=${guestId}`, {\n            method: 'DELETE',\n            keepalive: true,  // Ensures the request completes before unload\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if (!response.ok) {\n                console.error(\"Failed to delete guest data.\");\n            }\n            \n        }).catch(error => console.error(\"Error deleting guest data:\", error));\n    };\n    useEffect(() => {\n        const handleUnload = () => {\n            deleteGuestData(sessionStorage.getItem(\"guestUserId\"));\n        };\n\n\n        window.addEventListener(\"beforeunload\", handleUnload);\n\n        return () => {\n            window.removeEventListener(\"beforeunload\", handleUnload);\n        };\n    }, []);\n\n    \n    // Save userId and email to localStorage\n    \n    useEffect(() => {\n        if (userId.startsWith(\"guest-\")) {\n            sessionStorage.setItem(\"guestUserId\", userId);\n        } else {\n            localStorage.setItem(\"userId\", userId);\n            localStorage.setItem(\"email\", email);\n            localStorage.setItem(\"name\", name);\n            if (sessionStorage.getItem(\"guestUserId\")) {\n                deleteGuestData(sessionStorage.getItem(\"guestUserId\"));\n                sessionStorage.removeItem(\"guestUserId\"); \n                \n            }\n        }\n        \n    }, [userId, email, name]);\n\n    // Fetch total scans, flashcards, and mock tests when userId changes\n    \n    useEffect(() => {\n        if (!userId) return;\n        let isCancelled = false;\n\n        const fetchUserStats = async () => {\n            try {\n                const [fcRes, mtRes, scanRes] = await Promise.allSettled([\n                    fetch(`https://api.zukini.com/display/displayflashcards?userId=${userId}`),\n                    fetch(`https://api.zukini.com/display/displaymocktests?userId=${userId}`),\n                    fetch(`https://api.zukini.com/display/displayscans?userId=${userId}`)\n                ]);\n                \n                if (isCancelled) return;\n\n                if (\n                    fcRes.status === \"rejected\" ||\n                    mtRes.status === \"rejected\" ||\n                    scanRes.status === \"rejected\"\n                ) {\n                    console.error(\"One or more API requests failed\");\n                    return;\n                }\n\n                const FC = await fcRes;\n                const MT = await mtRes;\n                const Scans = await scanRes;\n\n                setTotalFlashcards(FC?.length || 0);\n                setTotalMockTests(MT?.length || 0);\n                setTotalScans(Scans?.length || 0);\n            } catch (error) {\n                console.error(\"Error fetching user stats:\", error);\n            }\n        };\n\n        fetchUserStats();\n        \n    }, [userId]);\n\n    return (\n        <UserContext.Provider value={{\n            userId, setUserId,\n            email, setEmail,\n            totalScans, setTotalScans,\n            totalFlashcards, setTotalFlashcards,\n            totalMockTests, setTotalMockTests,\n            name, setName\n        }}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n\n// Hook to use UserContext\nexport const useUser = () => useContext(UserContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}